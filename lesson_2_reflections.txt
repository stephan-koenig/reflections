What happens when you initialize a repository? Why do you need to do it?

    The directory now contains the .git directory and any files that are
    not tracked are listed. Now it is possible to add files that need to be
    tracked with git.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area contains any files that will be added to the repository
    with the next commit. The repository contains any previous and up to the
    last commit versions of files that were tracked at different points in time.
    The working directory only contains the most recent version of any remaining
    files. This seperation provides more granular control at what point files
    are being saved with a commit. With small files it might not matter if they
    are tracked all the time by git, but larger files would increase the amount
    of data (i.e. their size) that is maintained in the repository.

How can you use the staging area to make sure you have one commit per logical
change?

    By using git diff and git diff --staged we can determine what changes we
    recently included. By carefully adding files to the staging area we have
    better granular control to ensure that we only commit one logical change
    with each commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches can help 1) if multiple features are best introduced independently
    of each other; 2) to maintain a working branch while testing experimental
    features in another; 3) when multiple people are working on the same code
    trying to find the best implementation independent of each other; 4) work on
    bugs in a separate branch.

How do the diagrams help you visualize the branch structure?

    The diagrams help to visualize which commits have a parent-child
    relationship and why new commits while having a detached head (i.e. a
    previous commit is checked out and not the most recent one aka the head)
    would result in lost commits if these are not assigned to a new branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result contains all the additions and deletions contained in the tip of
    each branch compared to the commit of the branch point and the diagram
    represents that these changes of two branches are merged in a new commit
    whose parents are the tips of each branch.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

    Automatic merging is much faster than manual merging but it is limited to
    the ability of Git to resolve conflicts. Manual merges often readily resolve
    conflicts but take more time. They also pose a risk of introducing bugs into
    the code.
