When would you want to use a remote repository rather than keeping all your work
local?

    A remote repository enables you to share your code, sync it across multiple
    computers, and have a remote backup.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If there are commits to the remote executed by other users pulling these
    commits might confuse and potentially creating conflicts between two
    commits.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Clones are the copies of a repository regardless if their location. Forks
    is a specialized term describing a remote repository cloned to a new
    remote repository. Branches are commits that to now share all of the same
    parent commits.

    You would use a fork to personalize a project/repository without affecting
    the original project in any way. You would clone a repository either to
    create a remote or local repository or to create a new project that will be
    independent of the original one. Branches are useful to implement new
    features or experimental changes while mainting a working version of the
    code.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    By having the remote state stored locally it is always possible to determine
    if the local state is ahead of the remote; this enables us to anticipate if
    there might be new changes of remote commits introduced by collaborators
    that potentially will conflict with our own commits.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    The advantage would be that not all users have to have training in using
    Git and GitHub, have Git locally installed, and create a GitHub account.
    Instead, collaborators can just email each other the files, or use a file
    exchange program like Dropbox. The drawbacks are that it is harder to track
    versions, clearly label and exchange them, properly track multiple
    interdependant files, and merge versions from two collaborators into one.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
